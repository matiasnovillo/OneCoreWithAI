@page "/analyzedocument"
@rendermode InteractiveServer
@using Amazon
@using Amazon.S3
@using Amazon.S3.Transfer
@using Amazon.Textract;
@using System.Text
@using System.IO;
@using OneCore.DTOs;
@using OneCore.Repositories;
@using OneCore.Entities;
@inject BillRepository billRepository;
@inject CustomLoggerRepository customLoggerRepository;
@using OneCore.Components.Shared
@inject StateContainer StateContainer

<PageTitle>Carga de archivos</PageTitle>

@if (Toggle)
{
    <!--Usuario logueado-->
    <h1 class="mb-3"><i class="fas fa-file"></i> Carga de archivos para analizar</h1>

    <div class="alert alert-warning mb-5" role="alert">
        <i class="fas fa-exclamation"></i> Recuerda que los archivos deben estar en formato <b>PDF</b>, <b>PNG</b> o <b>JPG</b>, y
        deben pesar menos de <b>3MB</b>.
    </div>

    <label for="myfile" class="form-label"><i class="fas fa-upload"></i> Selecciona un archivo</label>
    <InputFile OnChange="@UploadFile" class="form-control form-control-lg mb-1" id="myfile" name="myfile" />
    <span class="text-danger">@((MarkupString)ErrorMessage)</span>
    <br />

    
    var progressCss = "progress" + (DisplayProgress ? "" : "d-none");
    var progressWidthStyle = ProgressPercent + "%";

    <!-- Progress bar -->
    <p>@ProgressText</p>
    <div class="@progressCss">
        <div class="progress-bar progress-bar-striped progress-bar-animated @ProgressBarColour" role="progressbar" style="width:@progressWidthStyle"
        area-valuenow="@ProgressPercent" aria-valuemin="0" aria-valuemax="100">
        </div>
    </div>
    <br />

    @if(ButtonText != "")
    {
        <button type="button" class="btn btn-success" data-bs-toggle="modal" data-bs-target="#OneCoreModal">
            @ButtonText
        </button>
    }

<!-- Modal -->
<div class="modal fade" id="OneCoreModal" tabindex="-1" aria-labelledby="exampleModalLabel" aria-hidden="true">
    <div class="modal-dialog">
        <div class="modal-content">
            <div class="modal-header">
                <h1 class="modal-title fs-5" id="exampleModalLabel">@((MarkupString)ModalTitleToRender)</h1>
            </div>
            <div class="modal-body">
                @((MarkupString)ModalBodyToRender)
            </div>
            <div class="modal-footer">
                <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Cerrar</button>
            </div>
        </div>
    </div>
</div>
}
else
{
    <!--Usuario NO logueado-->
    <div class="container">
        <div class="d-flex mt-5 pt-5 justify-content-center">
            <div class="card" style="width: 30rem;">
                <a href="https://www.shutterstock.com/es/image-photo/astronaut-elements-this-image-furnished-by-1022034061" target="_blank">
                    <img src="/img/astronaut.jpg" class="card-img-top" alt="login-first">
                </a>
                <div class="card-body">
                    <h5 class="card-title">Contenido no disponible</h5>
                    <p class="card-text">Para acceder a este contenido debes ingresar tus credenciales primero</p>
                    <a href="/" class="btn btn-outline-primary"><i class="fas fa-home"></i> Home</a>
                </div>
            </div>
        </div>
    </div>
}


@code {
    public string ScannedText { get; set; } = "";
    public string ErrorMessage { get; set; } = "";
    public string ButtonText { get; set; } = "";
    public string ModalTitleToRender { get; set; } = "";
    public string ModalBodyToRender { get; set; } = "";
    public string TablesToRender { get; set; } = "";
    public bool Toggle { get; set; }

    //Progress bar
    public bool DisplayProgress { get; set; } = false;
    public int ProgressPercent { get; set; } = 0;
    public string ProgressText { get; set; } = "";
    public string ProgressBarColour { get; set; } = "bg-info";

    public string BucketName { get; } = "matiasnovillos3";
    public long MaxFileSize { get; }  = 1024L * 1024L; //3MB max.
    IAmazonS3 _s3 = new AmazonS3Client(RegionEndpoint.USEast2);

    private User User;

    protected override void OnInitialized()
    { 
        User = StateContainer.User;

        if (User != null)
        {
            if (User.UserId != 0)
            {
                //Logged user
                Toggle = true;
            }
            else
            {
                //Not logged user
                Toggle = false;
            }
        }
        else
        {
            //Impossible
            Toggle = false;
        }

        base.OnInitialized();
    }

    private async void UploadFile(InputFileChangeEventArgs e)
    {
        if (e.File.Name.EndsWith(".pdf") || e.File.Name.EndsWith(".png") || e.File.Name.EndsWith(".jpg"))
        {
            if (e.File.Size <= MaxFileSize)
            {
                Main(e);
            }
            else
            {
                ErrorMessage = $@"<i class=""fas fa-exclamation""></i> Solo se permiten archivos con un peso máximo de 3MB";
            }
        }
        else
        {
            ErrorMessage = $@"<i class=""fas fa-exclamation""></i> Solo se aceptan archivos PDF, PNG o JPG";
        }
    }

    private async void Main(InputFileChangeEventArgs e)
    {
        try
        {
            //Basic configuration
            ButtonText = "";
            ProgressBarColour = "bg-info";
            ErrorMessage = "";
            DisplayProgress = true;
            ProgressText = "Subiendo archivo al servidor...";
            ProgressPercent = 80;

            string path = Path.Combine(Environment.CurrentDirectory, "Uploads", e.File.Name);

            //Save file in local server
            await using FileStream FileStream = new(path, FileMode.Create);
            await e.File.OpenReadStream(MaxFileSize).CopyToAsync(FileStream);

            FileStream.Close();

            //Log info
            CustomLogger customLogger = new()
                {
                    DateTime = DateTime.Now,
                    InteractionType = $@"Interacción del usuario",
                    Description = $@"El usuario {User.Email} ha subido el archivo {e.File.Name} para analizar, al servidor local",
                    UserId = User.UserId
                };
            await customLoggerRepository.Add(customLogger, CancellationToken.None);
            
            //Save file in AWS S3 storage
            ProgressText = "Subiendo archivo a AWS S3...";
            ProgressPercent = 81;
            SaveFileInAWSS3(e.File.Name, path);

            //Log info
            CustomLogger customLogger2 = new()
                {
                    DateTime = DateTime.Now,
                    InteractionType = $@"Interacción del usuario",
                    Description = $@"El usuario {User.Email} ha subido el archivo {e.File.Name} para analizar, a AWS S3",
                    UserId = User.UserId
                };
            await customLoggerRepository.Add(customLogger2, CancellationToken.None);

            //Scan file located in AWS S3 storage, to get text
            ProgressText = "Analizando archivo con AWS Textract...";
            ProgressPercent = 82;
            ScannedText = await ScanFile(e.File.Name);

            //Classify file
            ProgressText = "Clasificando archivo...";
            ProgressPercent = 83;
            char BillOrDocument = ClassifyFile(ScannedText);

            if (BillOrDocument == 'b') //Bill
            {
                ProgressText = "El archivo es una factura...";
                ProgressPercent = 84;

                BillDTO billDTO = await ScanBillForTables(e.File.Name);

                TablesToRender = CreateTables(billDTO);

                List<KeyValuePair<string, string>> KeyValuePairResult = await ScanBillForAnotherInformation(e.File.Name);

                string ClientName = (from x in KeyValuePairResult
                                     where x.Key.Trim() == "Cliente:"
                                     select x.Value).FirstOrDefault();

                string ClientAddress = (from x in KeyValuePairResult
                                        where x.Key.Trim() == "Dirección del cliente:"
                                        select x.Value).FirstOrDefault();

                string ProviderName = (from x in KeyValuePairResult
                                       where x.Key.Trim() == "Proveedor:"
                                       select x.Value).FirstOrDefault();

                string ProviderAddress = (from x in KeyValuePairResult
                                          where x.Key.Trim() == "Dirección del proveedor:"
                                          select x.Value).FirstOrDefault();

                string BillingNumber = (from x in KeyValuePairResult
                                        where x.Key.Trim() == "Nro. de factura:"
                                        select x.Value).FirstOrDefault();

                string BillingDate = (from x in KeyValuePairResult
                                      where x.Key.Trim() == "Fecha:"
                                      select x.Value).FirstOrDefault();

                string BillingTotal = (from x in KeyValuePairResult
                                       where x.Key.Trim() == "Total"
                                       select x.Value).FirstOrDefault();

                ModalTitleToRender = $@"<i class=""fas fa-file""></i> Documento: Factura";

                ModalBodyToRender = $@"
<div class=""container"">
    <ul class=""list-group mb-4"">
        <li class=""list-group-item""><b>Nombre del cliente:</b> {ClientName}</li>
        <li class=""list-group-item""><b>Dirección del cliente:</b> {ClientAddress}</li>
        <li class=""list-group-item""><b>Nombre del proveedor:</b> {ProviderName}</li>
        <li class=""list-group-item""><b>Dirección del proveedor:</b> {ProviderAddress}</li>
        <li class=""list-group-item""><b>Nro. de factura:</b> {BillingNumber}</li>
        <li class=""list-group-item""><b>Fecha de la factura:</b> {BillingDate}</li>
        <li class=""list-group-item""><b>Total de la factura:</b> {BillingTotal}</li>
    </ul>
    {TablesToRender}
</div>";
                
                //Save data in database
                ProgressText = "Guardando datos en base de datos...";
                ProgressPercent = 85;
                Bill Bill = new()
                {
                    ClientName = ClientName ?? "",
                    ClientAddress = ClientAddress ?? "",
                    ProviderName = ProviderName ?? "",
                    ProviderAddress = ProviderAddress ?? "",
                    BillingNumber = BillingNumber ?? "",
                    BillingDate = BillingDate ?? "",
                    BillingTotal = BillingTotal ?? "",
                    FileName = e.File.Name,
                    FileURL = path,
                    UserId = StateContainer.User.UserId

                };
                await billRepository.Add(Bill, CancellationToken.None);

                //Log info
                CustomLogger customLogger3 = new()
                    {
                        DateTime = DateTime.Now,
                        InteractionType = $@"IA",
                        Description = $@"AWS Textract ha detectado que {e.File.Name} es una factura",
                        UserId = User.UserId
                    };
                await customLoggerRepository.Add(customLogger3, CancellationToken.None);
            }
            else //Document
            {
                ProgressText = "El archivo es un documento...";
                ProgressPercent = 86;

                ScanDocumentWithAnalyzeDocumentAsync(e.File.Name);

                //Log info
                CustomLogger customLogger3 = new()
                    {
                        DateTime = DateTime.Now,
                        InteractionType = $@"IA",
                        Description = $@"AWS Textract ha detectado que {e.File.Name} es un documento (no es factura)",
                        UserId = User.UserId
                    };
                await customLoggerRepository.Add(customLogger3, CancellationToken.None);
            }

            ButtonText = "Ver análisis";
            ProgressText = "Análisis finalizado";
            ProgressPercent = 100;
            ProgressBarColour = "bg-success";
        }
        catch (Exception ex)
        {
            ProgressText = "Error...";
            ProgressPercent = 0;
            ProgressBarColour = "bg-danger";
            ErrorMessage = $@"<i class=""fas fa-exclamation""></i> {ex.Message}";
        }
        finally
        {
            //Re-render the page to show ScannedText
            await InvokeAsync(() => StateHasChanged()).ConfigureAwait(false);
        }
    }

    private void SaveFileInAWSS3(string fileName, string path)
    {
        TransferUtility TransferUtility = new TransferUtility(_s3);
        TransferUtilityUploadRequest TransferUtilityUploadRequest = new TransferUtilityUploadRequest();

        TransferUtilityUploadRequest.BucketName = BucketName;
        TransferUtilityUploadRequest.Key = fileName;
        try
        {
            MemoryStream MemoryStream = new MemoryStream();
            Stream Stream = File.OpenRead(path);

            Stream.CopyTo(MemoryStream);
            MemoryStream.Seek(0, SeekOrigin.Begin);
            byte[] buf = new byte[MemoryStream.Length];
            MemoryStream.Read(buf, 0, buf.Length);

            TransferUtilityUploadRequest.InputStream = MemoryStream;
            TransferUtility.Upload(TransferUtilityUploadRequest);
        }
        catch (Exception ex)
        {
            string errorMessage = ex.Message;
        }
        finally
        {
            TransferUtilityUploadRequest.InputStream.Close();
        }
    }

    public async Task<string> ScanFile(string objectName)
    {
        string ScannedText = "";

        AmazonTextractClient AmazonTextractClient = new AmazonTextractClient();

        var TextractResults = await AmazonTextractClient.DetectDocumentTextAsync(new Amazon.Textract.Model.DetectDocumentTextRequest()
        {
            Document = new Amazon.Textract.Model.Document()
            {
                S3Object = new Amazon.Textract.Model.S3Object()
                {
                    Bucket = BucketName,
                    Name = objectName
                }
            }
        });

        foreach (var block in TextractResults.Blocks)
        {
            if (block.BlockType == BlockType.LINE)
            {
                ScannedText += $@"{block.Text}{Environment.NewLine}";
            }
        }

        return ScannedText;
    }

    public char ClassifyFile(string text)
    {
        string TextToLower = text.ToLower();
        if (TextToLower.Contains("i.v.a") || TextToLower.Contains("iva"))
        {
            return 'b';
        }
        else
        {
            return 'd';
        }

    }

    public async Task<BillDTO> ScanBillForTables(string objectName)
    {
        AmazonTextractClient AmazonTextractClient = new AmazonTextractClient();

        var TextractResults = await AmazonTextractClient.AnalyzeDocumentAsync(new Amazon.Textract.Model.AnalyzeDocumentRequest()
        {
            Document = new Amazon.Textract.Model.Document()
            {
                S3Object = new Amazon.Textract.Model.S3Object()
                {
                    Bucket = BucketName,
                    Name = objectName
                }
            },
            FeatureTypes = new List<string>() { "TABLES" },
        });

        List<string> lstHeader = new List<string>();
        List<string> lstCell = new List<string>();

        foreach (var block in TextractResults.Blocks)
        {
            if (block.BlockType == BlockType.TABLE)
            {
                // Access rows and cells of the table
                foreach (var relationship in block.Relationships)
                {
                    if (relationship.Type == "CHILD")
                    {
                        foreach (var childId in relationship.Ids)
                        {
                            // Access each cell of the table
                            foreach (var cellItem in TextractResults.Blocks)
                            {
                                if (cellItem.Id == childId && cellItem.BlockType == BlockType.CELL)
                                {

                                    foreach (var relationship1 in cellItem.Relationships)
                                    {
                                        if (relationship1.Type == "CHILD")
                                        {
                                            foreach(var childId1 in relationship1.Ids)
                                            {
                                                foreach(var wordItem in TextractResults.Blocks)
                                                {
                                                    if (wordItem.Id == childId1 && wordItem.BlockType == BlockType.WORD)
                                                    {
                                                        if (cellItem.EntityTypes.Count != 0)
                                                        {
                                                            if (cellItem.EntityTypes[0] == "COLUMN_HEADER")
                                                            {
                                                                lstHeader.Add(wordItem.Text);
                                                            }
                                                        }
                                                        else
                                                        {
                                                            lstCell.Add(wordItem.Text);
                                                        }
                                                    }
                                                }
                                            }
                                        }
                                    }
                                }
                            } 
                        }
                    }
                }
            }
        }
        return new BillDTO(lstHeader, lstCell);
    }

    public string CreateTables(BillDTO billDTO)
    {
        string TablesToRender = $@"
<table class=""table table-striped table-hover table-bordered table-responsive"">
    <thead>
        <tr>";
        foreach (string header in billDTO.lstHeader)
        {
            TablesToRender += $@"
            <th scope=""col"">{header}</th>";
        }
        TablesToRender += $@"
        </tr>
    </thead>
    <tbody>
        
        <tr>";
        foreach (string cell in billDTO.lstCell)
        {
            TablesToRender += $@"
            <td>{cell}</td>";
        }
        TablesToRender += $@"
        </tr>
    </tbody>
</table>";

        return TablesToRender;
    }

    public async Task<List<KeyValuePair<string, string>>> ScanBillForAnotherInformation(string objectName)
    {
        AmazonTextractClient AmazonTextractClient = new AmazonTextractClient();

        var TextractResults = await AmazonTextractClient.AnalyzeDocumentAsync(new Amazon.Textract.Model.AnalyzeDocumentRequest()
        {
            Document = new Amazon.Textract.Model.Document()
            {
                S3Object = new Amazon.Textract.Model.S3Object()
                {
                    Bucket = BucketName,
                    Name = objectName
                }
            },
            FeatureTypes = new List<string>() { "FORMS" }
        });

        List<KeyValuePair<string, string>> KeyValuePairResult = new List<KeyValuePair<string, string>>();

        var KeyValueFromTextractResults = (from x in TextractResults.Blocks
                                where x.BlockType == Amazon.Textract.BlockType.KEY_VALUE_SET
                                select x).ToArray();

        foreach (var keyValueFromTextractResults in KeyValueFromTextractResults)
        {
            string keyForKeyValuePair = "";
            string valueForKeyValuePair = "";

            var keyRawFromBlock = (from k in keyValueFromTextractResults.Relationships
                              where k.Type == Amazon.Textract.RelationshipType.CHILD
                              select k).FirstOrDefault();

            var valueRawFromBlock = (from v in keyValueFromTextractResults.Relationships
                                where v.Type == Amazon.Textract.RelationshipType.VALUE
                                select v).FirstOrDefault();

            if (keyRawFromBlock != null)
            {
                foreach (string keyIdFromBlock in keyRawFromBlock.Ids)
                {
                    var keyElementFromBlock = (from k in TextractResults.Blocks
                                      where k.Id == keyIdFromBlock
                                      select k).FirstOrDefault();

                    keyForKeyValuePair += $@"{keyElementFromBlock.Text} ";
                }
            }

            if (valueRawFromBlock != null)
            {
                var valueElement = (from x in TextractResults.Blocks
                                    where x.Id == valueRawFromBlock.Ids[0]
                                    select x).FirstOrDefault();

                if (valueElement.Relationships.Count > 0)
                {
                    foreach (var valueElementId in valueElement.Relationships[0].Ids)
                    {
                        var valueElementFromBlock = (from x in TextractResults.Blocks
                                              where x.Id == valueElementId
                                              select x).FirstOrDefault();
                        valueForKeyValuePair += $@"{valueElementFromBlock.Text} ";
                    }
                }
            }

            if (!string.IsNullOrEmpty(keyForKeyValuePair.ToString()) &&
                !string.IsNullOrEmpty(valueForKeyValuePair.ToString()))
            {
                KeyValuePairResult.Add(new KeyValuePair<string, string>(keyForKeyValuePair.ToString(), valueForKeyValuePair.ToString()));
            }
        }

        return KeyValuePairResult;
    }

    public void ScanDocumentWithAnalyzeDocumentAsync(string objectName)
    {
        
    }
}
