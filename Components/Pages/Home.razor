@page "/"
@using OneCore.Entities
@using OneCore.Repositories
@using OneCore.Components.Shared
@inject UserRepository userRepository;
@inject CustomLoggerRepository customLoggerRepository;
@inject StateContainer StateContainer

<PageTitle>Home - OneCore</PageTitle>

<div class="container">
    <div class="card mb-3">
        <div class="card-header">
            <img src="/img/OneCoreLogo.png" />
        </div>
        <div class="card-body">
            <h3>Análisis de archivos con IA</h3>
            <ul class="list-group list-group-flush">
                <li class="list-group-item">AWS Textract</li>
                <li class="list-group-item">Google Cloud NLP</li>
                <li class="list-group-item">Azure Text Analytics</li>
            </ul>
        </div>
    </div>
    <div class="row">
        <div class="col-4">
            <div class="card bg-light">
                <div class="card-body">
                    @if (!Toggle)
                    {
                        <h2 class="card-title mb-3">
                            <i class="fas fa-door-open"></i> 
                            Login
                        </h2>
                        <form method="post" @onsubmit="Submit" 
                            @formname="login-form" class="mb-4">
                            <AntiforgeryToken />
                            <div class="mb-3">
                                <label for="email" class="form-label">
                                    <i class="fas fa-envelope"></i> 
                                    Email
                                </label>
                                <InputText @bind-Value="User.Email" 
                                type="text" id="email" 
                                class="form-control" 
                                placeholder="user@example.com" />
                            </div>
                            <div class="mb-3">
                                <label for="password" 
                                    class="form-label">
                                    <i class="fas fa-key"></i> 
                                    Password
                                </label>
                                <InputText type="password" 
                                    @bind-Value="User!.Password" 
                                    class="form-control" 
                                    id="password" />
                            </div>
                            <button id="btn-login" type="submit" 
                            class="btn btn-primary">
                                <i class="fas fa-door-open"></i> 
                                Entrar
                            </button>
                        </form>
                        @if (MessageForLoginForm != "")
                        {
                            <span class="text-danger">
                                @((MarkupString)MessageForLoginForm)
                            </span>
                        }
                    }
                    else
                    {
                        <h2 class="card-title mb-3">
                            <i class="fas fa-user"></i> 
                            Datos del usuario
                        </h2>
                        <ul class="list-group">
                            <li class="list-group-item">
                                Email: @User?.Email
                            </li>
                            <li class="list-group-item">
                                Contraseña: ****
                            </li>
                        </ul>
                        <button @onclick="Salir" 
                            class="btn btn-danger mt-3">
                            <i class="fas fa-lock"></i> 
                            Salir
                        </button>
                    }
                </div>
            </div>
        </div>
        <div class="col-8">
            <div class="card bg-light">
                <img src="/img/NETyAWS.png" class="card-img-top mb-4"
                     width="350" alt="logos">
                <div class="card-body">
                    <ul class="list-group list-group-flush mb-3">
                        <li class="list-group-item bg-light">
                            <h5>
                                <b>.NET</b>
                            </h5>
                        </li>
                        <li class="list-group-item bg-light">
                            Se usa .NET 8 y Blazor (renderizado del lado del 
                            servidor) para el desarrollo de la aplicación web
                        </li>
                        <li class="list-group-item bg-light">
                            Para el estilo y diseño del front-end se
                            usa Bootstrap 5
                        </li>
                        <li class="list-group-item bg-light">
                            Para los iconos se usa Font Awesome mediante
                            su CDN
                        </li>
                        <li class="list-group-item bg-light">
                            Se usa Entity Framework Core para el acceso a datos, 
                            también se utilizan comandos para desplegar y 
                            actualizar la base de datos como 
                            <code>
                                <b>Add-Migration [nombre]</b>
                            </code> y
                            <code>
                                <b>Update-Database</b>
                            </code>
                        </li>
                        <li class="list-group-item bg-light">
                            Se usa arquitectura de 4 capas:
                            <ol>
                                <li>
                                    Páginas Blazor
                                    (renderizado del lado del servidor), 
                                    las cuales se alojan en la carpeta
                                    <code><b>/OneCore/Components</b></code>
                                </li>
                                <li>
                                    Repositorios con código LINQ para operaciones
                                    a base de datos, los cuales se alojan en la
                                    carpeta
                                    <code><b>/OneCore/Repositories</b></code>
                                </li>
                                <li>
                                    Entidades, las cuales contienen las propiedades
                                    como copia fiel de las columnas de cada tabla,
                                    estas se alojan en la carpeta 
                                    <code><b>/OneCore/Entities</b></code>
                                </li>
                                <li>
                                    Base de datos con MS SQL Server. Las migraciones
                                    se encuentran en la carpeta 
                                    <code><b>/OneCore/Migrations</b></code>
                                </li>
                            </ol>
                        </li>
                        <li class="list-group-item bg-light">
                            Se modularizan funciones comunes a toda la aplicación,
                            las cuales se alojan en la carpeta 
                            <code><b>/OneCore/CommonFunctions</b></code>
                            Cabe recalcar que aquí se alojan las funciones para 
                            las tecnologías de IA
                        </li>
                    </ul>
                    <ul class="list-group list-group-flush mb-3">
                        <li class="list-group-item bg-light">
                            <h5>
                                <b>AWS</b>
                            </h5>
                        </li>
                        <li class="list-group-item bg-light">
                            Los archivos .pdf, .jpg y .png se guardan en
                            AWS S3
                        </li>
                        <li class="list-group-item bg-light">
                            Se utiliza para análisis de textos,
                            Textract de AWS
                        </li>
                    </ul>
                    <ul class="list-group list-group-flush mb-3">
                        <li class="list-group-item bg-light">
                            <h5>
                                <b>Google Cloud</b>
                            </h5>
                        </li>
                        <li class="list-group-item bg-light">
                            Se utiliza para análisis de textos,
                            orientado a análisis de sentimientos, 
                            Google Cloud NLP API
                        </li>
                    </ul>
                    <ul class="list-group list-group-flush mb-3">
                        <li class="list-group-item bg-light">
                            <h5>
                                <b>Azure Text Analytics</b>
                            </h5>
                        </li>
                        <li class="list-group-item bg-light">
                            Se utiliza para análisis de textos,
                            orientado a resumir y dar una descripción,
                            Azure Text Analytics. Cabe recalcar que
                            he consolidado la descripción con el resumen.
                            Pues, Azure Text Analytics solo puede devolver
                            palabras claves de un texto
                        </li>
                    </ul>
                    <ul class="list-group list-group-flush mb-3">
                        <li class="list-group-item bg-light">
                            <h5>
                                <b>NOTAS</b>
                            </h5>
                        </li>
                        <li class="list-group-item bg-light">
                            No se usa sesión ni en el servidor ni el
                            buscador, para pasar información entre
                            componentes/páginas se usa un servicio alojado
                            en Components/Shared/StateContainer.cs
                        </li>
                        <li class="list-group-item bg-light">
                            El diseño de la aplicación esta totalmente
                            en castellano, pero el código esta todo en
                            ingles
                        </li>
                    </ul>
                    <ul class="list-group list-group-flush mb-3">
                        <li class="list-group-item bg-light">
                            <h5><b>
                                Features agregados además de los 
                                solicitados
                                </b>
                            </h5>
                        </li>
                        <li class="list-group-item bg-light">
                            Sistema de login con email y contraseña
                        </li>
                        <li class="list-group-item bg-light">
                            En la página de log, se puede descargar,
                            además de Excel, también PDF y CSV
                        </li>
                        <li class="list-group-item bg-light">
                            En la página de log, se pueden hacer búsquedas
                            estrictas o laxas
                        </li>
                        <li class="list-group-item bg-light">
                            Se hizo una página especial para subir
                            facturas customizadas de un proveedor
                            particular de telecomunicaciones de Argentina
                        </li>
                        <li class="list-group-item bg-light">
                            CRUD de usuarios para agregar, editar o eliminar 
                            usuarios
                        </li>
                        <li class="list-group-item bg-light">
                            CRUD de archivos para editar o eliminar los archivos
                            subidos
                        </li>
                        <li class="list-group-item bg-light">
                            Permitir subir varios archivos en una sola operación
                        </li>
                    </ul>
                    <ul class="list-group list-group-flush mb-3">
                        <li class="list-group-item bg-light">
                            <h5>
                                <b>
                                    Features que se pueden agregar en 
                                    un futuro
                                </b>
                            </h5>
                        </li>
                        <li class="list-group-item bg-light">
                            Agregar paginacion en la pagina de 
                            logging, usuarios y archivos para evitar cargas 
                            grandes de datos que ralenticen la aplicación
                        </li>
                        <li class="list-group-item bg-light">
                            Encriptar las claves de los usuarios en la
                            base de datos para mayor seguridad
                        </li>
                        <li class="list-group-item bg-light">
                            Trabajar con hilos para mostrar mensajes en tiempo
                            real en las páginas
                        </li>
                    </ul>
                </div>
            </div>
        </div>
    </div>
</div>

@code {
    [SupplyParameterFromForm]
    public User? User { get; set; }

    public string MessageForLoginForm { get; set; } = "";

    public bool Toggle { get; set; } = false;

    protected override void OnInitialized()
    {
        //Look for saved user in shared component, simulates a session
        User = StateContainer.User == null ? new() : StateContainer.User;

        if (User.UserId !=0)
        {
            //Logged user
            Toggle = true;
        }
        else
        {
            //Not logged user
            Toggle = false;
        }
    }

    private async void Submit()
    {
        try
        {
            //Validations
            if (User!.Email == "" || User!.Password == "")
            {
                MessageForLoginForm = $@"<i class=""fas fa-exclamation""></i>
                                        Completa todos los campos";
                return;
            }

            //Encrypt password
            string EncryptedPassword = new CommonFunctions.CommonFunctions().EncodeString(User.Password);

            //Get user by email and password
            User = userRepository.
            GetByEmailAndPassword(User.Email, 
                EncryptedPassword,
                CancellationToken.None);

            //Next if is to quit null value from User
            if (User == null)
            {
                User = new();
            }

            if (User.UserId != 0)
            {
                //User found
                StateContainer.User = User;
                Toggle = true;

                //Log info
                CustomLogger customLogger = new()
                    {
                        DateTime = DateTime.Now,
                        InteractionType = $@"Interacción del usuario",
                        Description = $@"El usuario {User.Email} ha ingresado 
                                        al sistema",
                        UserId = User.UserId
                    };
                await customLoggerRepository
                .Add(customLogger, CancellationToken.None);
            }
            else
            {
                //User not found
                MessageForLoginForm = $@"<i class=""fas fa-exclamation""></i> 
                                        Usuario no encontrado";
                
                //Log info
                CustomLogger customLogger = new()
                    {
                        DateTime = DateTime.Now,
                        InteractionType = $@"Interacción del usuario",
                        Description = $@"Un usuario ha intentado entrar al
                                        sistema pero no pudo",
                        UserId = 0
                    };
                await customLoggerRepository
                .Add(customLogger, CancellationToken.None);
            }
        }
        catch (Exception ex)
        {
            MessageForLoginForm = $@"<i class=""fas fa-exclamation""></i> 
                                    Hubo un error. Intenta nuevamente. 
                                    Mensaje de error: {ex.Message}";
        }
    }

    private void Salir(MouseEventArgs e)
    {
        User = new User();
        StateContainer.User = new User();

        //Show login form
        Toggle = false;
    }
}

