@page "/users"
@using OneCore.Repositories
@using OneCore.Entities
@using OneCore.Components.Shared
@inject UserRepository userRepository
@inject StateContainer StateContainer

<PageTitle>Usuarios - OneCore</PageTitle>

@if(Toggle)
{
    <!--Page for logged user-->
    <div class="container">
        <div class="card mb-3">
            <div class="card-header">
                <h1>
                    <i class="fas fa-user"></i>
                    Control de usuarios
                </h1>
                <NavLink class="btn btn-success text-white mt-3" href="users/0">
                    <span class="fas fa-plus" aria-hidden="true"></span>
                    &nbsp;Crear usuario
                </NavLink>
            </div>
            <div class="card-body">
                <p class="mb-3 text-danger">@ErrorMessage</p>
                <p class="mb-3 text-success">@SuccessMessage</p>
                <div class="card mb-3">
                    <div class="card-body">
                        <div class="row">
                            <div class="col-4">
                                <!--Searchbox-->
                                <input type="search" @oninput="SearchText"
                                       class="form-control"
                                       placeholder="Buscar usuario..." />
                                <br />
                                <!--Búsqueda estricta-->
                                <div class="mb-3">
                                    <h6><b>Búsqueda estricta o laxa</b></h6>
                                    <input type="checkbox" class="mx-4"
                                           id="strict-search"
                                           name="strict-search"
                                           @bind="checkStrict" />
                                    <label for="strict-search">
                                        Búsqueda estricta
                                    </label>
                                </div>
                            </div>
                        </div>
                    </div>
                </div>
                <!--Table-->
                <h6><b>Cantidad de usuarios: @TotalRows</b></h6>
                <table class="table table-striped table-hover table-bordered table-responsive mt-4">
                    <thead>
                        <tr>
                            <th>ID</th>
                            <th>Usuario</th>
                            <th>Contraseña</th>
                            <th>Acciones</th>
                        </tr>
                    </thead>
                    <tbody>
                        @foreach (User user in lstUser)
                        {
                            <tr>
                                <td>@user.UserId</td>
                                <td>@user.Email</td>
                                <td>@user.Password</td>
                                <td>
                                    <div class="nav-item">
                                        <button class="btn btn-sm btn-outline-danger"
                                                onclick=@(() => Delete(@user.UserId))>
                                            <span class="fas fa-trash" aria-hidden="true"></span>
                                        </button>
                                    </div>
                                    <div class="nav-item mt-2">
                                        <a class="btn btn-sm btn-outline-info" 
                                            href="users/@user.UserId">
                                            <span class="fas fa-pen" aria-hidden="true"></span>
                                        </a>
                                    </div>
                                </td>
                            </tr>
                        }
                    </tbody>
                </table>
            </div>
        </div>
    </div>
}
else
{
    <!--Page for not logged user-->
    <div class="container">
        <div class="d-flex mt-5 pt-5 justify-content-center">
            <div class="card bg-light" style="width: 30rem;">
                <a href="https://www.shutterstock.com/es/image-photo/astronaut-elements-this-image-furnished-by-1022034061"
                   target="_blank">
                    <img src="/img/astronaut.jpg" class="card-img-top"
                         alt="login-first">
                </a>
                <div class="card-body">
                    <h5 class="card-title">
                        Contenido no disponible
                    </h5>
                    <p class="card-text">
                        Para acceder a este contenido debes ingresar
                        tus credenciales primero
                    </p>
                    <a href="/" class="btn btn-outline-primary">
                        <i class="fas fa-home"></i>
                        Home
                    </a>
                </div>
            </div>
        </div>
    </div>
}

@code {
    public int TotalRows { get; set; } = 0;

    public bool checkStrict { get; set; }

    public bool Toggle { get; set; }

    public string TextToSearch { get; set; }

    public string ErrorMessage { get; set; }

    public string SuccessMessage { get; set; }

    private User User;
    private List<User?> lstUser { get; set; }

    protected override void OnInitialized()
    {
        User = StateContainer.User;

        if (User != null)
        {
            if (User.UserId != 0)
            {
                //Logged user
                Toggle = true;
                lstUser = userRepository.
                GetAll(CancellationToken.None);
                TotalRows = lstUser.Count();
            }
            else
            {
                //Not logged user
                Toggle = false;
            }
        }
        else
        {
            //Impossible
            Toggle = false;
        }

        base.OnInitialized();
    }

    private async void SearchText(ChangeEventArgs args)
    {
        try
        {
            //Basic configuration
            SuccessMessage = "";

            lstUser = userRepository.
            GetAllByEmail(args.Value.ToString(), checkStrict, CancellationToken.None);

            TotalRows = lstUser.Count();
        }
        catch (Exception ex)
        {
            ErrorMessage = $@"Hubo un error. Intenta nuevamente. 
                            Mensaje de error: {ex.Message}";
        }

    }

    private async void Delete(int UserId)
    {
        try
        {
            await userRepository.DeleteByUserId(UserId, CancellationToken.None);

            lstUser = userRepository.
            GetAll(CancellationToken.None);

            TotalRows = lstUser.Count();

            TextToSearch = "";

            //Re-render the page
            await InvokeAsync(() => StateHasChanged()).ConfigureAwait(false);

            SuccessMessage = "Usuario eliminado correctamente";
        }
        catch (Exception ex)
        {
            ErrorMessage = $@"Hubo un error. Intenta nuevamente.
                            Mensaje de error: {ex.Message}";
        }
    }
}
