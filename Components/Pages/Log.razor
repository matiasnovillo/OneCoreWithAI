@page "/log"
@using ClosedXML.Excel
@using System.Data
@using IronPdf
@using OneCore.Repositories
@using OneCore.Entities
@using System.Globalization
@using CsvHelper
@inject CustomLoggerRepository customLoggerRepository
@using OneCore.Components.Shared
@inject StateContainer StateContainer

<PageTitle>Log</PageTitle>

@if(Toggle)
{
    <!--Usuario logueado-->
    <h1 class="mb-3"><i class="fas fa-comments"></i> Sistema de logging</h1>
    <p class="mb-3 text-danger">@ErrorMessage</p>


    <div class="row">
        <div class="col-6 d-flex justify-content-start">
            <!--Searchbox-->
            <input type="search" @oninput="SearchText" class="form-control" 
            list="datalistOptions" placeholder="Ingresar texto..." />
            <datalist id="datalistOptions">
                <option value="IA" />
                <option value="Interacción del usuario" />
                <option value="Excel" />
                <option value="PDF" />
                <option value="CSV" />
                <option value="Factura" />
                <option value="Documento" />
            </datalist>
            <br />
            <!--Búsqueda estricta-->
            <input type="checkbox" class="mx-4" id="strict-search" 
            name="strict-search" @bind="checkStrict" />
            <label for="strict-search">Búsqueda estricta</label>
        </div>
    </div>


    
    <div class="row mt-4">
        <div class="d-flex justify-content-end">
            <!--Radiobuttons-->
            <div class="col-6 d-flex justify-content-start">
                <input type="radio" id="interactiontype" 
                    checked="@(radiobuttonSearchType == "interactiontype")"
                       @onchange="@(() => radiobuttonSearchType = "interactiontype")"
                    name="search-type" value="interactiontype">
                <label for="interactiontype">Tipo de interacción</label><br>

                <input type="radio" id="description" 
                    checked="@(radiobuttonSearchType == "description")"
                       @onchange="@(() => radiobuttonSearchType = "description")"
                    name="search-type" value="description">
                <label for="css">description</label><br>
            </div>
            <!--Botones de exportación-->
            <div class="col-6 d-flex justify-content-end">
                <button type="button" @onclick="ConvertToExcel" 
                    class="btn btn-outline-info ml-4 mb-4">
                    <i class="fas fa-file"></i>
                    Exportar a Excel
                </button>
                <button type="button" @onclick="ConvertToCSV" 
                    class="btn btn-outline-warning mb-4 mx-3">
                    <i class="fas fa-file"></i>
                    Exportar a CSV
                </button>
                <button type="button" @onclick="ConvertToPDF" 
                    class="btn btn-outline-success mb-4">
                    <i class="fas fa-file"></i>
                    Exportar a PDF
                </button>
            </div>
        </div>
    </div>
    <!--Botones de descarga-->
    <div class="row">
        <div class="d-flex justify-content-end">
            <div class="col-6 d-flex justify-content-end">
                @if (ShowDownloadButtonForExcel)
                {
                    <a class="btn btn-info mb-4" href="@DownloadPathForExcel" download>
                        <i class="fas fa-download"></i>
                        Descargar
                    </a>
                }
                @if (ShowDownloadButtonForCSV)
                {
                    <a class="btn btn-warning mb-4 mx-3" href="@DownloadPathForCSV" download>
                        <i class="fas fa-download"></i>
                        Descargar
                    </a>
                }
                @if (ShowDownloadButtonForPDF)
                {
                    <a class="btn btn-success mb-4" href="@DownloadPathForPDF" download>
                        <i class="fas fa-download"></i>
                        Descargar
                    </a>
                }
            </div>
        </div>
    </div>
    
    <!--Table-->
    <table class="table table-striped table-hover table-bordered table-responsive mt-4">
    <thead>
        <tr>
            <th>ID</th>
            <th>Tipo de interacción</th>
            <th>Descripción</th>
            <th>Fecha y hora</th>
            <th>Usuario</th>
        </tr>
    </thead>
    <tbody>
    @foreach (CustomLogger customLogger in lstCustomLogger)
    {
        <tr>
            <td>@customLogger.CustomLoggerId</td>
            <td>@customLogger.InteractionType</td>
            <td>@customLogger.Description</td>
            <td>@customLogger.DateTime.ToString("dd-MM-yyyy hh:mm")</td>
            <!--TODO It has to say customLogger.User.Email-->
            <td>@StateContainer.User.Email</td> 
        </tr>
    }
    </tbody>
</table>
}
else
{
    <!--Usuario NO logueado-->
    <div class="container">
        <div class="d-flex mt-5 pt-5 justify-content-center">
            <div class="card" style="width: 30rem;">
                <a href="https://www.shutterstock.com/es/image-photo/astronaut-elements-this-image-furnished-by-1022034061" target="_blank">
                    <img src="/img/astronaut.jpg" class="card-img-top" alt="login-first">
                </a>
                <div class="card-body">
                    <h5 class="card-title">Contenido no disponible</h5>
                    <p class="card-text">Para acceder a este contenido 
                        debes ingresar tus credenciales primero</p>
                    <a href="/" class="btn btn-outline-primary">
                        <i class="fas fa-home"></i> Home
                    </a>
                </div>
            </div>
        </div>
    </div>
}

@code {
    public string radiobuttonSearchType { get; set; } = "description";

    public bool checkStrict { get; set; }

    public bool Toggle { get; set; }

    public bool ShowDownloadButtonForExcel { get; set; }
    public bool ShowDownloadButtonForPDF { get; set; }
    public bool ShowDownloadButtonForCSV { get; set; }

    public string DownloadPathForExcel { get; set; }
    public string DownloadPathForPDF { get; set; }
    public string DownloadPathForCSV { get; set; }

    public string TextToSearch { get; set; }

    public string ErrorMessage { get; set; }

    private User User;
    private List<CustomLogger?> lstCustomLogger { get; set; }

    protected override void OnInitialized()
    {
        User = StateContainer.User;

        if (User != null)
        {
            if (User.UserId != 0)
            {
                //Logged user
                Toggle = true;
                lstCustomLogger = customLoggerRepository.GetAll(CancellationToken.None);
            }
            else
            {
                //Not logged user
                Toggle = false;
            }
        }
        else
        {
            //Impossible
            Toggle = false;
        }

        base.OnInitialized();
    }

    private async void SearchText(ChangeEventArgs args)
    {
        if (radiobuttonSearchType == "interactiontype")
        {
            lstCustomLogger = customLoggerRepository.GetAllByInteractionType(args.Value.ToString(), checkStrict, CancellationToken.None);
        }
        else
        {
            lstCustomLogger = customLoggerRepository.GetAllByDescription(args.Value.ToString(), checkStrict, CancellationToken.None);
        }
        
    }

    private async void ConvertToExcel()
    {
        try
        {
            //Set initial state
            ErrorMessage = "";

            using var Book = new XLWorkbook();

            List<CustomLogger?> lstCustomLogger = new();
            DataTable dtCustomLogger = new DataTable();
            dtCustomLogger.TableName = "CustomLogger";

            //We define another DataTable dtUserCopy to avoid issue related to DateTime conversion
            DataTable dtCustomLoggerCopy = new DataTable();
            dtCustomLoggerCopy.TableName = "CustomLoggerCopy";

            #region Define columns for dtCustomLoggerCopy
            DataColumn dtColumn1 = new DataColumn();
            dtColumn1.DataType = typeof(string);
            dtColumn1.ColumnName = "ID";
            dtCustomLoggerCopy.Columns.Add(dtColumn1);

            DataColumn dtColumn2 = new DataColumn();
            dtColumn2.DataType = typeof(string);
            dtColumn2.ColumnName = "Tipo de interacción";
            dtCustomLoggerCopy.Columns.Add(dtColumn2);

            DataColumn dtColumn3 = new DataColumn();
            dtColumn3.DataType = typeof(string);
            dtColumn3.ColumnName = "Descripción";
            dtCustomLoggerCopy.Columns.Add(dtColumn3);

            DataColumn dtColumn4 = new DataColumn();
            dtColumn4.DataType = typeof(string);
            dtColumn4.ColumnName = "Fecha y hora";
            dtCustomLoggerCopy.Columns.Add(dtColumn4);

            DataColumn dtColumn5 = new DataColumn();
            dtColumn5.DataType = typeof(string);
            dtColumn5.ColumnName = "ID del usuario";
            dtCustomLoggerCopy.Columns.Add(dtColumn5);
            #endregion

            lstCustomLogger = customLoggerRepository.GetAll(CancellationToken.None);

            foreach (CustomLogger? customLogger in lstCustomLogger)
            {
                dtCustomLoggerCopy.Rows.Add(customLogger.CustomLoggerId,
                customLogger.InteractionType,
                customLogger.Description,
                customLogger.DateTime,
                customLogger.UserId);
            }

            var Sheet = Book.Worksheets.Add(dtCustomLoggerCopy);

            Sheet.ColumnsUsed().AdjustToContents();

            DownloadPathForExcel = $@"wwwroot/Downloads/ExcelFiles/{DateTime.Now.ToString("yyyy_MM_dd_HH_mm_ss_fff")}.xlsx";
            Book.SaveAs(DownloadPathForExcel);

            //Delete wwwroot from path to download correctly
            DownloadPathForExcel = DownloadPathForExcel.Replace("wwwroot", "");

            ShowDownloadButtonForExcel = true;

            //Log info
            CustomLogger customLogger2 = new()
                {
                    DateTime = DateTime.Now,
                    InteractionType = $@"Interacción del usuario",
                    Description = $@"El usuario {User.Email} ha exportado a Excel la tabla de logging",
                    UserId = User.UserId
                };
            await customLoggerRepository.Add(customLogger2, CancellationToken.None);
        }
        catch (Exception ex)
        {
            ErrorMessage = $@"Hubo un error en la conversión. Mensaje del error: {ex.Message}";
        }
    }

    private async void ConvertToCSV()
    {
        try
        {
            //Set initial state
            ErrorMessage = "";

            List<CustomLogger?> lstCustomLogger = customLoggerRepository.GetAll(CancellationToken.None);

            DownloadPathForCSV = $@"wwwroot/Downloads/CSVFiles/{DateTime.Now.ToString("yyyy_MM_dd_HH_mm_ss_fff")}.csv";

            using (var Writer = new StreamWriter(DownloadPathForCSV))
            using (var CsvWriter = new CsvWriter(Writer, CultureInfo.InvariantCulture))
            {
                CsvWriter.WriteRecords(lstCustomLogger);
            }

            //Delete wwwroot from path to download correctly
            DownloadPathForCSV = DownloadPathForCSV.Replace("wwwroot", "");

            ShowDownloadButtonForCSV = true;

            //Log info
            CustomLogger customLogger = new()
                {
                    DateTime = DateTime.Now,
                    InteractionType = $@"Interacción del usuario",
                    Description = $@"El usuario {User.Email} ha exportado a CSV la tabla de logging",
                    UserId = User.UserId
                };
            await customLoggerRepository.Add(customLogger, CancellationToken.None);
        }
        catch (Exception ex)
        {
            ErrorMessage = $@"Hubo un error en la conversión. Mensaje del error: {ex.Message}";
        }
    }

    private async void ConvertToPDF()
    {
        try
        {
            //Set initial state
            ErrorMessage = "";

            var Renderer = new HtmlToPdf();
            string RowsAsHTML = "";
            List<CustomLogger?> lstCustomLogger = customLoggerRepository.GetAll(CancellationToken.None);
            DownloadPathForPDF = $@"wwwroot/Downloads/PDFFiles/{DateTime.Now.ToString("yyyy_MM_dd_HH_mm_ss_fff")}.pdf";

            foreach (CustomLogger? customLogger in lstCustomLogger)
            {
                RowsAsHTML += $@"{customLogger?.ToStringOnlyValuesForHTML()}";
            }

            Renderer.RenderHtmlAsPdf($@"
<table cellpadding=""0"" cellspacing=""0"" border=""0"" width=""88%"" style=""width: 88% !important; min-width: 88%; max-width: 88%;"">
    <tr>
        <td align=""left"" valign=""top"">
            <font face=""'Source Sans Pro', sans-serif"" color=""#1a1a1a"" style=""font-size: 52px; line-height: 55px; font-weight: 300; letter-spacing: -1.5px;"">
                <span style=""font-family: 'Source Sans Pro', Arial, Tahoma, Geneva, sans-serif; color: #1a1a1a; font-size: 52px; line-height: 55px; font-weight: 300; letter-spacing: -1.5px;"">OneCore</span>
            </font>
            <div style=""height: 25px; line-height: 25px; font-size: 23px;"">&nbsp;</div>
            <font face=""'Source Sans Pro', sans-serif"" color=""#4c4c4c"" style=""font-size: 36px; line-height: 45px; font-weight: 300; letter-spacing: -1px;"">
                <span style=""font-family: 'Source Sans Pro', Arial, Tahoma, Geneva, sans-serif; color: #4c4c4c; font-size: 36px; line-height: 45px; font-weight: 300; letter-spacing: -1px;"">Registro del sistema</span>
            </font>
            <div style=""height: 35px; line-height: 35px; font-size: 33px;"">&nbsp;</div>
        </td>
    </tr>
</table>
<br>
<table cellpadding=""0"" cellspacing=""0"" border=""0"" width=""100%"" style=""width: 100% !important; min-width: 100%; max-width: 100%;"">
    <tr>
        <th align=""left"" valign=""top"" style=""border-width: 1px; border-style: solid; border-color: #e8e8e8; border-top: none; border-left: none; border-right: none;"">
            <font face=""'Source Sans Pro', sans-serif"" color=""#000000"" style=""font-size: 20px; line-height: 28px; font-weight: 600;"">
                <span style=""font-family: 'Source Sans Pro', Arial, Tahoma, Geneva, sans-serif; color: #000000; font-size: 20px; line-height: 28px; font-weight: 600;"">ID</span>
            </font>
            <div style=""height: 10px; line-height: 10px; font-size: 8px;"">&nbsp;</div>
        </th>
        <th align=""left"" valign=""top"" style=""border-width: 1px; border-style: solid; border-color: #e8e8e8; border-top: none; border-left: none; border-right: none;"">
            <font face=""'Source Sans Pro', sans-serif"" color=""#000000"" style=""font-size: 20px; line-height: 28px; font-weight: 600;"">
                <span style=""font-family: 'Source Sans Pro', Arial, Tahoma, Geneva, sans-serif; color: #000000; font-size: 20px; line-height: 28px; font-weight: 600;"">Tipo de interacción</span>
            </font>
            <div style=""height: 10px; line-height: 10px; font-size: 8px;"">&nbsp;</div>
        </th>
        <th align=""left"" valign=""top"" style=""border-width: 1px; border-style: solid; border-color: #e8e8e8; border-top: none; border-left: none; border-right: none;"">
            <font face=""'Source Sans Pro', sans-serif"" color=""#000000"" style=""font-size: 20px; line-height: 28px; font-weight: 600;"">
                <span style=""font-family: 'Source Sans Pro', Arial, Tahoma, Geneva, sans-serif; color: #000000; font-size: 20px; line-height: 28px; font-weight: 600;"">Descripción</span>
            </font>
            <div style=""height: 10px; line-height: 10px; font-size: 8px;"">&nbsp;</div>
        </th>
        <th align=""left"" valign=""top"" style=""border-width: 1px; border-style: solid; border-color: #e8e8e8; border-top: none; border-left: none; border-right: none;"">
            <font face=""'Source Sans Pro', sans-serif"" color=""#000000"" style=""font-size: 20px; line-height: 28px; font-weight: 600;"">
                <span style=""font-family: 'Source Sans Pro', Arial, Tahoma, Geneva, sans-serif; color: #000000; font-size: 20px; line-height: 28px; font-weight: 600;"">Fecha y hora</span>
            </font>
            <div style=""height: 10px; line-height: 10px; font-size: 8px;"">&nbsp;</div>
        </th>
        <th align=""left"" valign=""top"" style=""border-width: 1px; border-style: solid; border-color: #e8e8e8; border-top: none; border-left: none; border-right: none;"">
            <font face=""'Source Sans Pro', sans-serif"" color=""#000000"" style=""font-size: 20px; line-height: 28px; font-weight: 600;"">
                <span style=""font-family: 'Source Sans Pro', Arial, Tahoma, Geneva, sans-serif; color: #000000; font-size: 20px; line-height: 28px; font-weight: 600;"">ID del usuario</span>
            </font>
            <div style=""height: 10px; line-height: 10px; font-size: 8px;"">&nbsp;</div>
        </th>
    </tr>
    {RowsAsHTML}
</table>
<br>
<font face=""'Source Sans Pro', sans-serif"" color=""#868686"" style=""font-size: 17px; line-height: 20px;"">
    <span style=""font-family: 'Source Sans Pro', Arial, Tahoma, Geneva, sans-serif; color: #868686; font-size: 17px; line-height: 20px;"">Printed on: {DateTime.Now}</span>
</font>
").SaveAs(DownloadPathForPDF);

            ShowDownloadButtonForPDF = true;

            //Delete wwwroot from path to download correctly
            DownloadPathForPDF = DownloadPathForPDF.Replace("wwwroot", "");

            //Log info
            CustomLogger customLogger2 = new()
                {
                    DateTime = DateTime.Now,
                    InteractionType = $@"Interacción del usuario",
                    Description = $@"El usuario {User.Email} ha exportado a PDF la tabla de logging",
                    UserId = User.UserId
                };
            await customLoggerRepository.Add(customLogger2, CancellationToken.None);
        }
        catch (Exception ex)
        {
            ErrorMessage = $@"Hubo un error en la conversión. Mensaje del error: {ex.Message}";
        }
        
    }
}
