@page "/analyzecustombill"
@rendermode InteractiveServer
@using Amazon.S3;
@using Amazon;
@using Amazon.S3.Transfer;
@using System.Text;
@using System.IO;
@using OneCore.Repositories;
@using OneCore.Entities;
@using OneCore.CommonFunctions;
@using OneCore.Components.Shared
@inject BillRepository billRepository;
@inject CustomLoggerRepository customLoggerRepository;
@inject StateContainer StateContainer

<PageTitle>Carga de factura customizada - OneCore</PageTitle>

@if (Toggle)
{
<div class="container">
    <!--Page for logged user-->

    <!--Titulo-->
        <div class="card mb-3">
            <div class="card-header">
                <h1>
                    <i class="fas fa-file"></i>
                    Carga de factura customizada
                </h1>
            </div>
            <div class="card-body">
                <!--Alertas-->
                <div class="alert alert-info mb-3" role="alert">
                    <i class="fas fa-info"></i>
                    En esta pagina puedes probar cómo es analizar una
                    factura totalmente customizada creada por una empresa
                    real que provee servicios de comunicación.
                    Puedes descargar la
                    <a class="btn btn-link" 
                        download
                        href="Downloads/FilesToAnalyze/Textract-Example-Custom-Bill.pdf">
                        factura customizada
                        <i class="fas fa-download"></i>
                    </a>
                    para probar.
                    Recuerda que esta página no lleva registros al logging.
                </div>
                <div class="alert alert-warning mb-5" role="alert">
                    <i class="fas fa-exclamation"></i>
                    Recuerda que los archivos deben estar en formato <b>PDF</b>,
                    <b>PNG</b> o <b>JPG</b>, y deben pesar menos de <b>3MB</b>.
                </div>

                <!--Archivo a cargar-->
                <label for="myfile" class="form-label">
                    <i class="fas fa-upload"></i>
                    Selecciona un archivo
                </label>
                <InputFile OnChange="@UploadFile"
                           class="form-control form-control-lg mb-1"
                           id="myfile" name="myfile" />
                <span class="text-danger">@((MarkupString)ErrorMessage)</span>
                <br />

                <!-- Progress bar -->
                @{
                    var progressCss = "progress" + (DisplayProgress ? "" : "d-none");
                    var progressWidthStyle = ProgressPercent + "%";
                }


                <p>@ProgressText</p>
                <div class="@progressCss">
                    <div class="progress-bar progress-bar-striped progress-bar-animated @ProgressBarColour"
                         role="progressbar" 
                         style="width:@progressWidthStyle"
                         area-valuenow="@ProgressPercent" 
                         aria-valuemin="0"
                         aria-valuemax="100">
                    </div>
                </div>
                <br />

                @if (ButtonText != "")
                {
                    <button type="button" class="btn btn-success"
                            data-bs-toggle="modal" data-bs-target="#OneCoreModal">
                        @ButtonText
                    </button>
                }
            </div>
        </div>


</div>
    <!-- Modal -->
    <div class="modal fade" id="OneCoreModal" tabindex="-1" 
    aria-labelledby="exampleModalLabel" aria-hidden="true">
        <div class="modal-dialog">
            <div class="modal-content">
                <div class="modal-header">
                    <h1 class="modal-title fs-5" 
                    id="exampleModalLabel">
                        @((MarkupString)ModalTitleToRender)
                    </h1>
                </div>
                <div class="modal-body">
                    @((MarkupString)ModalBodyToRender)
                </div>
                <div class="modal-footer">
                    <button type="button" class="btn btn-secondary" 
                    data-bs-dismiss="modal">
                        Cerrar
                    </button>
                </div>
            </div>
        </div>
    </div>
}
else
{
    <!--Page for not logged user-->
    <OneCore.Components.Layout.NotLogged></OneCore.Components.Layout.NotLogged>
}

@code {
    #region Properties
    public string ScannedText { get; set; } = "";
    public string ErrorMessage { get; set; } = "";
    public string ButtonText { get; set; } = "";
    public string ModalTitleToRender { get; set; } = "";
    public string ModalBodyToRender { get; set; } = "";
    public string TablesToRender { get; set; } = "";
    public bool Toggle { get; set; }

    //Progress bar
    public bool DisplayProgress { get; set; } = false;
    public int ProgressPercent { get; set; } = 0;
    public string ProgressText { get; set; } = "";
    public string ProgressBarColour { get; set; } = "bg-info";

    private User? User;
    #endregion
    
    protected override void OnInitialized()
    {
        User = StateContainer.User;

        if (User != null)
        {
            if (User.UserId != 0)
            {
                //Logged user
                Toggle = true;
            }
            else
            {
                //Not logged user
                Toggle = false;
            }
        }
        else
        {
            //Impossible
            Toggle = false;
        }

        base.OnInitialized();
    }

    private void UploadFile(InputFileChangeEventArgs e)
    {
        //Basic configuration
        CommonFunctions CommonFunctions = new();

        if (e.File.Name.EndsWith(".pdf") 
        || e.File.Name.EndsWith(".png") 
        || e.File.Name.EndsWith(".jpg"))
        {
            if (e.File.Size <= CommonFunctions.MaxFileSize)
            {
                Main(e);
            }
            else
            {
                ErrorMessage = $@"<i class=""fas fa-exclamation""></i> 
                                Solo se permiten archivos con un peso 
                                máximo de 3MB";
            }
        }
        else
        {
            ErrorMessage = $@"<i class=""fas fa-exclamation""></i> 
                            Solo se aceptan archivos PDF, PNG o JPG";
        }
    }

    private async void Main(InputFileChangeEventArgs e)
    {
        try
        {
            //Basic configuration
            ButtonText = "";
            ProgressBarColour = "bg-info";
            ErrorMessage = "";
            DisplayProgress = true;
            CommonFunctions CommonFunctions = new();

            string BucketName = "[BucketName]";
            AmazonS3Client AmazonS3Client = new AmazonS3Client(
                RegionEndpoint.USEast2);
            AWS.Textract.Functions AWSTextractFunctions = new(
                BucketName, AmazonS3Client);
            AWS.S3.Functions AWSS3Functions = new(BucketName, AmazonS3Client);

            //Save file in local server
            ProgressText = "Subiendo archivo al servidor...";
            ProgressPercent = 80;
            await CommonFunctions.SaveFileInLocalServer(e.File);

            //Save file in AWS S3 storage
            ProgressText = "Subiendo archivo a AWS S3...";
            ProgressPercent = 81;

            string FilePath = Path.Combine(
                Environment.CurrentDirectory,
                "wwwroot",
                "Uploads",
                e.File.Name);
            AWSS3Functions.SaveFileInAWSS3(FilePath);


            //Scan file located in AWS S3 storage, to get text
            ProgressText = "Analizando archivo con AWS Textract...";
            ProgressPercent = 82;
            List<KeyValuePair<string, string>> lstResults = 
            await AWSTextractFunctions.
            ScanFileForLinesAndWordsCustom(e.File.Name);

            ProgressText = "El archivo es una factura customizada...";
            ProgressPercent = 84;

            string ClientName = (from x in lstResults
                                 where x.Key.Trim() == "ClientName"
                                 select x.Value).FirstOrDefault();

            string ClientAddress = (from x in lstResults
                                    where x.Key.Trim() == "ClientAddress"
                                    select x.Value).FirstOrDefault();

            string ProviderName = (from x in lstResults
                                   where x.Key.Trim() == "ProviderName"
                                   select x.Value).FirstOrDefault();

            string ProviderAddress = (from x in lstResults
                                      where x.Key.Trim() == "ProviderAddress"
                                      select x.Value).FirstOrDefault();

            string BillingNumber = (from x in lstResults
                                    where x.Key.Trim() == "BillingNumber"
                                    select x.Value).FirstOrDefault();

            string BillingDate = "-no aparece-";

            string BillingTotal = (from x in lstResults
                                    where x.Key.Trim() == "BillingTotal"
                                    select x.Value).FirstOrDefault();

            ModalTitleToRender = $@"<i class=""fas fa-file""></i> 
                                    Documento: Factura";

            ModalBodyToRender = $@"
<div class=""container"">
<ul class=""list-group mb-4"">
        <li class=""list-group-item"">
            <b>Nombre del cliente:</b> {ClientName}
        </li>
        <li class=""list-group-item"">
            <b>Dirección del cliente:</b> {ClientAddress}
        </li>
        <li class=""list-group-item"">
            <b>Nombre del proveedor:</b> {ProviderName}
        </li>
        <li class=""list-group-item"">
            <b>Dirección del proveedor:</b> {ProviderAddress}
        </li>
        <li class=""list-group-item"">
            <b>Nro. de factura:</b> {BillingNumber}
        </li>
        <li class=""list-group-item"">
            <b>Fecha de la factura:</b> {BillingDate}
        </li>
        <li class=""list-group-item"">
            <b>Total de la factura:</b> {BillingTotal}
        </li>
    </ul>
<p>Tabla no disponible</p>
</div>";

            ButtonText = "Ver análisis";
            ProgressText = "Análisis finalizado";
            ProgressPercent = 100;
            ProgressBarColour = "bg-success";
        }
        catch (Exception ex)
        {
            ProgressText = "Error...";
            ProgressPercent = 0;
            ProgressBarColour = "bg-danger";
            ErrorMessage = $@"<i class=""fas fa-exclamation""></i> {ex.Message}";
        }
        finally
        {
            //Re-render the page to show ScannedText
            await InvokeAsync(() => StateHasChanged()).ConfigureAwait(false);
        }
    }
}
