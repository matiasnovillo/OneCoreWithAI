@page "/"
@using OneCore.Entities
@using OneCore.Repositories
@using OneCore.Components.Shared
@inject UserRepository userRepository;
@inject CustomLoggerRepository customLoggerRepository;
@inject StateContainer StateContainer

<PageTitle>Home - OneCore</PageTitle>

<div class="container">
    <div class="card mb-3">
        <div class="card-header">
            <img class="d-none d-sm-inline" src="/img/OneCoreLogo.png" />
        </div>
        <div class="card-body">
            <h3>Análisis de archivos con IA</h3>
            <ul class="list-group list-group-flush">
                <li class="list-group-item">AWS Textract</li>
                <li class="list-group-item">Google Cloud NLP</li>
                <li class="list-group-item">Azure Text Analytics</li>
                <li class="list-group-item">Python con TextRankSummarizer</li>
            </ul>
        </div>
    </div>
    <div class="row">
        <div class="col-12 col-md-4">
            <div class="card bg-light my-3">
                <div class="card-body">
                    @if (!Toggle)
                    {
                        <h2 class="card-title mb-3">
                            <i class="fas fa-door-open"></i> 
                            Login
                        </h2>
                        <form method="post" @onsubmit="Submit" 
                            @formname="login-form" class="mb-4">
                            <AntiforgeryToken />
                            <div class="mb-3">
                                <label for="email" class="form-label">
                                    <i class="fas fa-envelope"></i> 
                                    Email
                                </label>
                                <InputText @bind-Value="User.Email" 
                                type="text" id="email" 
                                class="form-control" 
                                placeholder="user@example.com" />
                            </div>
                            <div class="mb-3">
                                <label for="password" 
                                    class="form-label">
                                    <i class="fas fa-key"></i> 
                                    Password
                                </label>
                                <InputText type="password" 
                                    @bind-Value="User!.Password" 
                                    class="form-control" 
                                    id="password" />
                            </div>
                            <button id="btn-login" type="submit" 
                            class="btn btn-primary">
                                <i class="fas fa-door-open"></i> 
                                Entrar
                            </button>
                        </form>
                        @if (MessageForLoginForm != "")
                        {
                            <span class="text-danger">
                                @((MarkupString)MessageForLoginForm)
                            </span>
                        }
                    }
                    else
                    {
                        <h2 class="card-title mb-3">
                            <i class="fas fa-user"></i> 
                            Datos del usuario
                        </h2>
                        <ul class="list-group">
                            <li class="list-group-item">
                                Email: @User?.Email
                            </li>
                            <li class="list-group-item">
                                Contraseña: ****
                            </li>
                        </ul>
                        <button @onclick="Salir" 
                            class="btn btn-danger mt-3">
                            <i class="fas fa-lock"></i> 
                            Salir
                        </button>
                    }
                </div>
            </div>
        </div>
    </div>
</div>

@code {
    #region Properties
    [SupplyParameterFromForm]
    public User? User { get; set; }

    public string MessageForLoginForm { get; set; } = "";

    public bool Toggle { get; set; } = false;
    #endregion

    protected override void OnInitialized()
    {
        //Look for saved user in shared component, simulates a session
        User = StateContainer.User == null ? new() : StateContainer.User;

        if (User.UserId !=0)
        {
            //Logged user
            Toggle = true;
        }
        else
        {
            //Not logged user
            Toggle = false;
        }
    }

    #region Events
    private async void Submit()
    {
        try
        {
            //Validations
            if (User!.Email == "" || User!.Password == "")
            {
                MessageForLoginForm = $@"<i class=""fas fa-exclamation""></i>
                                        Completa todos los campos";
                return;
            }

            //Encrypt password
            string EncryptedPassword = new CommonFunctions.CommonFunctions().EncodeString(User.Password);

            //Get user by email and password
            User = userRepository.
            GetByEmailAndPassword(User.Email, 
                EncryptedPassword,
                CancellationToken.None);

            //Next if is to quit null value from User
            if (User == null)
            {
                User = new();
            }

            if (User.UserId != 0)
            {
                //User found
                StateContainer.User = User;
                Toggle = true;

                //Log info
                CustomLogger customLogger = new()
                    {
                        DateTime = DateTime.Now,
                        InteractionType = $@"Interacción del usuario",
                        Description = $@"El usuario {User.Email} ha ingresado 
                                        al sistema",
                        UserId = User.UserId
                    };
                await customLoggerRepository
                .Add(customLogger, CancellationToken.None);
            }
            else
            {
                //User not found
                MessageForLoginForm = $@"<i class=""fas fa-exclamation""></i> 
                                        Usuario no encontrado";

                //Log info
                CustomLogger customLogger = new()
                    {
                        DateTime = DateTime.Now,
                        InteractionType = $@"Interacción del usuario",
                        Description = $@"Un usuario ha intentado entrar al
                                        sistema pero no pudo",
                        UserId = 1
                    };
                await customLoggerRepository
                .Add(customLogger, CancellationToken.None);
            }
        }
        catch (Exception ex)
        {
            MessageForLoginForm = $@"<i class=""fas fa-exclamation""></i> 
                                    Hubo un error. Intenta nuevamente. 
                                    Mensaje de error: {ex.Message}";
        }
    }

    private void Salir(MouseEventArgs e)
    {
        User = new User();
        StateContainer.User = new User();

        //Show login form
        Toggle = false;
    }
    #endregion
}

